// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/asset/v1beta1/gov.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AddPairProposal struct {
	Title            string                                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description      string                                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	AssetIn          uint64                                 `protobuf:"varint,3,opt,name=asset_in,json=assetIn,proto3" json:"asset_in,omitempty" yaml:"asset_in"`
	AssetOut         uint64                                 `protobuf:"varint,4,opt,name=asset_out,json=assetOut,proto3" json:"asset_out,omitempty" yaml:"asset_out"`
	LiquidationRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=liquidation_ratio,json=liquidationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_ratio" yaml:"liquidation_ratio"`
}

func (m *AddPairProposal) Reset()         { *m = AddPairProposal{} }
func (m *AddPairProposal) String() string { return proto.CompactTextString(m) }
func (*AddPairProposal) ProtoMessage()    {}
func (*AddPairProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_31c5aab0360b917f, []int{0}
}
func (m *AddPairProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPairProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPairProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPairProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPairProposal.Merge(m, src)
}
func (m *AddPairProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddPairProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPairProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddPairProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddPairProposal)(nil), "comdex.asset.v1beta1.AddPairProposal")
}

func init() { proto.RegisterFile("comdex/asset/v1beta1/gov.proto", fileDescriptor_31c5aab0360b917f) }

var fileDescriptor_31c5aab0360b917f = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0x5b, 0x2e, 0x5c, 0xa5, 0x9a, 0x80, 0x95, 0x98, 0xc6, 0xc5, 0x94, 0x74, 0x41, 0xd8,
	0xd0, 0x09, 0x71, 0x63, 0xdc, 0x49, 0xdc, 0xe8, 0x46, 0xec, 0xd2, 0x0d, 0x29, 0x6d, 0xa9, 0x13,
	0x5b, 0x4e, 0xed, 0x4c, 0x51, 0xde, 0xc2, 0xc7, 0xf0, 0x51, 0xd8, 0xc9, 0xd2, 0xb8, 0x98, 0x68,
	0x79, 0x83, 0x3e, 0x81, 0xe9, 0x0c, 0x24, 0x35, 0x6e, 0xe6, 0x9c, 0x39, 0xbf, 0xef, 0xfc, 0x49,
	0x3e, 0x0d, 0x79, 0x10, 0xfb, 0xc1, 0x0b, 0x76, 0x29, 0x0d, 0x18, 0x5e, 0x0c, 0xa7, 0x01, 0x73,
	0x87, 0x38, 0x84, 0x85, 0x9d, 0xa4, 0xc0, 0x40, 0xef, 0x48, 0x6e, 0x0b, 0x6e, 0x6f, 0xf9, 0x69,
	0x27, 0x84, 0x10, 0x84, 0x00, 0x97, 0x99, 0xd4, 0x5a, 0xef, 0x35, 0xad, 0x75, 0xe9, 0xfb, 0x63,
	0x97, 0xa4, 0xe3, 0x14, 0x12, 0xa0, 0x6e, 0xa4, 0xf7, 0xb4, 0x06, 0x23, 0x2c, 0x0a, 0x0c, 0xb5,
	0xab, 0xf6, 0x9b, 0xa3, 0x76, 0xc1, 0xcd, 0xc3, 0xa5, 0x1b, 0x47, 0x17, 0x96, 0x28, 0x5b, 0x8e,
	0xc4, 0xfa, 0xb9, 0x76, 0xe0, 0x07, 0xd4, 0x4b, 0x49, 0xc2, 0x08, 0xcc, 0x8d, 0x9a, 0x50, 0x9f,
	0x14, 0xdc, 0xd4, 0xa5, 0xba, 0x02, 0x2d, 0xa7, 0x2a, 0xd5, 0x6d, 0x6d, 0x5f, 0x1c, 0x37, 0x21,
	0x73, 0xe3, 0x5f, 0x57, 0xed, 0xd7, 0x47, 0xc7, 0x05, 0x37, 0x5b, 0xb2, 0x6d, 0x47, 0x2c, 0x67,
	0x4f, 0xa4, 0xd7, 0x73, 0x7d, 0xa8, 0x35, 0x65, 0x15, 0x32, 0x66, 0xd4, 0x45, 0x43, 0xa7, 0xe0,
	0x66, 0xbb, 0xda, 0x00, 0x19, 0xb3, 0x1c, 0x39, 0xf6, 0x36, 0x63, 0xfa, 0xb3, 0x76, 0x14, 0x91,
	0xa7, 0x8c, 0xf8, 0x6e, 0xb9, 0x71, 0x92, 0x96, 0xc1, 0x68, 0x88, 0x13, 0x6f, 0x56, 0xdc, 0x54,
	0x3e, 0xb9, 0xd9, 0x0b, 0x09, 0x7b, 0xc8, 0xa6, 0xb6, 0x07, 0x31, 0xf6, 0x80, 0xc6, 0x40, 0xb7,
	0x61, 0x40, 0xfd, 0x47, 0xcc, 0x96, 0x49, 0x40, 0xed, 0xab, 0xc0, 0x2b, 0xb8, 0x69, 0xc8, 0x45,
	0x7f, 0x06, 0x5a, 0x4e, 0xbb, 0x52, 0x73, 0xca, 0x77, 0x74, 0xb7, 0xfa, 0x46, 0xca, 0x5b, 0x8e,
	0x94, 0x55, 0x8e, 0xd4, 0x75, 0x8e, 0xd4, 0xaf, 0x1c, 0xa9, 0xaf, 0x1b, 0xa4, 0xac, 0x37, 0x48,
	0xf9, 0xd8, 0x20, 0xe5, 0x1e, 0xff, 0xda, 0x5b, 0x5a, 0x35, 0x80, 0xd9, 0x8c, 0x78, 0xc4, 0x8d,
	0xb6, 0x7f, 0xbc, 0x33, 0x57, 0x1c, 0x31, 0xfd, 0x2f, 0xbc, 0x3a, 0xfb, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x5b, 0x2d, 0xaa, 0x8d, 0xf9, 0x01, 0x00, 0x00,
}

func (m *AddPairProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPairProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPairProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationRatio.Size()
		i -= size
		if _, err := m.LiquidationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGov(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.AssetOut != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.AssetOut))
		i--
		dAtA[i] = 0x20
	}
	if m.AssetIn != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.AssetIn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddPairProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if m.AssetIn != 0 {
		n += 1 + sovGov(uint64(m.AssetIn))
	}
	if m.AssetOut != 0 {
		n += 1 + sovGov(uint64(m.AssetOut))
	}
	l = m.LiquidationRatio.Size()
	n += 1 + l + sovGov(uint64(l))
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddPairProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPairProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPairProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIn", wireType)
			}
			m.AssetIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOut", wireType)
			}
			m.AssetOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOut |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
